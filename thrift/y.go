// Code generated by goyacc - DO NOT EDIT.

package thrift

import __yyfmt__ "fmt"

import (
	//"fmt"
	idl "code.byted.org/ee/lobster-idlloader/types"
	"log"
)

/**
 * This global variable is used for automatic numbering of field indices etc.
 * when parsing the members of a struct. Field values are automatically
 * assigned starting from -1 and working their way down.
 */
var y_field_val = -1

/**
 * This global variable is used for automatic numbering of enum values.
 * y_enum_val is the last value assigned; the next auto-assigned value will be
 * y_enum_val+1, and then it continues working upwards.  Explicitly specified
 * enum values reset y_enum_val to that value.
 */
var y_enum_val int64 = -1
var G_arglist = 0
var struct_is_struct int64 = 0
var struct_is_union int64 = 1
var g_strict = 255
var G_program_doctext_candidate string
var G_program_doctext_status int

type yySymType struct {
	yys          int
	id           string
	iconst       int64
	dconst       float64
	bconst       bool
	tbool        bool
	tdoc         *idl.IDLDefine
	idltype      idl.IDLTypeI
	tbase        *idl.IDLBaseType
	ttypedef     *idl.IDLTypedef
	tanno        *idl.IDLAnnotation
	tannos       *idl.IDLAnnotations
	tlobattr     *idl.IDLLobAttr
	tlobattrs    *idl.IDLLobAttrs
	tenum        *idl.IDLEnum
	tenumv       *idl.IDLEnumValue
	senum        *idl.IDLEnum
	senumv       *idl.IDLEnumValue
	tconst       *idl.IDLConst
	tconstv      interface{}
	idlconstlist []interface{}
	idlconstmap  map[interface{}]interface{}
	tstruct      *idl.IDLStruct
	tservice     *idl.IDLService
	tfunction    *idl.IDLFunction
	tfield       *idl.IDLField
	dtext        string
	ereq         int // TField:EReq
	idldoci      idl.IDLTypeI
	tlist        *idl.IDLList
	tmap         *idl.IDLMap
	tset         *idl.IDLSet
	tcontainer   idl.IDLContainerI
	idlfieldid   int64
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault        = 57388
	yyEofCode        = 57344
	yyErrCode        = 57345
	tok_binary       = 57364
	tok_bool         = 57362
	tok_const        = 57383
	tok_cpp_include  = 57355
	tok_cpp_type     = 57356
	tok_doctext      = 57348
	tok_double       = 57371
	tok_dub_constant = 57352
	tok_enum         = 57382
	tok_extends      = 57380
	tok_fieldcomment = 57349
	tok_i16          = 57368
	tok_i32          = 57369
	tok_i64          = 57370
	tok_i8           = 57367
	tok_identifier   = 57346
	tok_include      = 57353
	tok_int_constant = 57351
	tok_list         = 57373
	tok_literal      = 57347
	tok_lobattr      = 57350
	tok_map          = 57372
	tok_namespace    = 57354
	tok_oneway       = 57375
	tok_optional     = 57385
	tok_reference    = 57387
	tok_required     = 57384
	tok_senum        = 57366
	tok_service      = 57381
	tok_set          = 57374
	tok_slist        = 57365
	tok_string       = 57363
	tok_struct       = 57377
	tok_throws       = 57379
	tok_typedef      = 57376
	tok_union        = 57386
	tok_void         = 57361
	tok_xception     = 57378
	tok_xsd_all      = 57357
	tok_xsd_attrs    = 57360
	tok_xsd_nillable = 57359
	tok_xsd_optional = 57358

	yyMaxDepth = 200
	yyTabOfs   = -120
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57346: 0,   // tok_identifier (135x)
		57364: 1,   // tok_binary (63x)
		57362: 2,   // tok_bool (63x)
		57371: 3,   // tok_double (63x)
		57368: 4,   // tok_i16 (63x)
		57369: 5,   // tok_i32 (63x)
		57370: 6,   // tok_i64 (63x)
		57367: 7,   // tok_i8 (63x)
		57373: 8,   // tok_list (63x)
		57350: 9,   // tok_lobattr (63x)
		57372: 10,  // tok_map (63x)
		57374: 11,  // tok_set (63x)
		57365: 12,  // tok_slist (63x)
		57363: 13,  // tok_string (63x)
		44:    14,  // ',' (61x)
		125:   15,  // '}' (60x)
		40:    16,  // '(' (51x)
		57381: 17,  // tok_service (51x)
		57344: 18,  // $end (48x)
		57383: 19,  // tok_const (48x)
		57382: 20,  // tok_enum (48x)
		57351: 21,  // tok_int_constant (48x)
		57366: 22,  // tok_senum (48x)
		57377: 23,  // tok_struct (48x)
		57376: 24,  // tok_typedef (48x)
		57386: 25,  // tok_union (48x)
		57378: 26,  // tok_xception (48x)
		57349: 27,  // tok_fieldcomment (38x)
		57385: 28,  // tok_optional (38x)
		57384: 29,  // tok_required (38x)
		41:    30,  // ')' (37x)
		59:    31,  // ';' (36x)
		123:   32,  // '{' (31x)
		57347: 33,  // tok_literal (30x)
		62:    34,  // '>' (28x)
		57387: 35,  // tok_reference (26x)
		91:    36,  // '[' (21x)
		57352: 37,  // tok_dub_constant (21x)
		57361: 38,  // tok_void (20x)
		57375: 39,  // tok_oneway (18x)
		57360: 40,  // tok_xsd_attrs (15x)
		93:    41,  // ']' (14x)
		57359: 42,  // tok_xsd_nillable (13x)
		57442: 43,  // TypeAnnotations (12x)
		57355: 44,  // tok_cpp_include (11x)
		57353: 45,  // tok_include (11x)
		57354: 46,  // tok_namespace (11x)
		57358: 47,  // tok_xsd_optional (11x)
		58:    48,  // ':' (10x)
		57391: 49,  // CommaOrSemicolonOptional (9x)
		57389: 50,  // BaseType (8x)
		57390: 51,  // CaptureDocText (8x)
		57398: 52,  // ContainerType (8x)
		57414: 53,  // FieldType (8x)
		57423: 54,  // ListType (8x)
		57426: 55,  // MapType (8x)
		57433: 56,  // SetType (8x)
		57434: 57,  // SimpleBaseType (8x)
		57435: 58,  // SimpleContainerType (8x)
		60:    59,  // '<' (6x)
		57393: 60,  // ConstList (5x)
		57395: 61,  // ConstMap (5x)
		57397: 62,  // ConstValue (5x)
		57408: 63,  // Field (5x)
		57409: 64,  // FieldComment (5x)
		57411: 65,  // FieldList (5x)
		61:    66,  // '=' (4x)
		57399: 67,  // CppType (3x)
		57356: 68,  // tok_cpp_type (3x)
		57424: 69,  // LobAttribute (2x)
		57425: 70,  // LobAttributeList (2x)
		42:    71,  // '*' (1x)
		57392: 72,  // Const (1x)
		57394: 73,  // ConstListContents (1x)
		57396: 74,  // ConstMapContents (1x)
		57400: 75,  // Definition (1x)
		57401: 76,  // DefinitionList (1x)
		57402: 77,  // DestroyDocText (1x)
		57403: 78,  // Enum (1x)
		57404: 79,  // EnumDef (1x)
		57405: 80,  // EnumDefList (1x)
		57406: 81,  // EnumValue (1x)
		57407: 82,  // Extends (1x)
		57410: 83,  // FieldIdentifier (1x)
		57412: 84,  // FieldReference (1x)
		57413: 85,  // FieldRequiredness (1x)
		57415: 86,  // FieldValue (1x)
		57416: 87,  // FlagArgs (1x)
		57417: 88,  // Function (1x)
		57418: 89,  // FunctionList (1x)
		57419: 90,  // FunctionType (1x)
		57420: 91,  // Header (1x)
		57421: 92,  // HeaderList (1x)
		57422: 93,  // Include (1x)
		57427: 94,  // Oneway (1x)
		57428: 95,  // Program (1x)
		57429: 96,  // Senum (1x)
		57430: 97,  // SenumDef (1x)
		57431: 98,  // SenumDefList (1x)
		57432: 99,  // Service (1x)
		57436: 100, // Struct (1x)
		57437: 101, // StructHead (1x)
		57438: 102, // Throws (1x)
		57380: 103, // tok_extends (1x)
		57379: 104, // tok_throws (1x)
		57357: 105, // tok_xsd_all (1x)
		57439: 106, // TypeAnnotation (1x)
		57440: 107, // TypeAnnotationList (1x)
		57441: 108, // TypeAnnotationValue (1x)
		57444: 109, // Typedef (1x)
		57443: 110, // TypeDefinition (1x)
		57445: 111, // UnflagArgs (1x)
		57446: 112, // Xception (1x)
		57447: 113, // XsdAll (1x)
		57448: 114, // XsdAttributes (1x)
		57449: 115, // XsdNillable (1x)
		57450: 116, // XsdOptional (1x)
		57388: 117, // $default (0x)
		57345: 118, // error (0x)
		57348: 119, // tok_doctext (0x)
	}

	yySymNames = []string{
		"tok_identifier",
		"tok_binary",
		"tok_bool",
		"tok_double",
		"tok_i16",
		"tok_i32",
		"tok_i64",
		"tok_i8",
		"tok_list",
		"tok_lobattr",
		"tok_map",
		"tok_set",
		"tok_slist",
		"tok_string",
		"','",
		"'}'",
		"'('",
		"tok_service",
		"$end",
		"tok_const",
		"tok_enum",
		"tok_int_constant",
		"tok_senum",
		"tok_struct",
		"tok_typedef",
		"tok_union",
		"tok_xception",
		"tok_fieldcomment",
		"tok_optional",
		"tok_required",
		"')'",
		"';'",
		"'{'",
		"tok_literal",
		"'>'",
		"tok_reference",
		"'['",
		"tok_dub_constant",
		"tok_void",
		"tok_oneway",
		"tok_xsd_attrs",
		"']'",
		"tok_xsd_nillable",
		"TypeAnnotations",
		"tok_cpp_include",
		"tok_include",
		"tok_namespace",
		"tok_xsd_optional",
		"':'",
		"CommaOrSemicolonOptional",
		"BaseType",
		"CaptureDocText",
		"ContainerType",
		"FieldType",
		"ListType",
		"MapType",
		"SetType",
		"SimpleBaseType",
		"SimpleContainerType",
		"'<'",
		"ConstList",
		"ConstMap",
		"ConstValue",
		"Field",
		"FieldComment",
		"FieldList",
		"'='",
		"CppType",
		"tok_cpp_type",
		"LobAttribute",
		"LobAttributeList",
		"'*'",
		"Const",
		"ConstListContents",
		"ConstMapContents",
		"Definition",
		"DefinitionList",
		"DestroyDocText",
		"Enum",
		"EnumDef",
		"EnumDefList",
		"EnumValue",
		"Extends",
		"FieldIdentifier",
		"FieldReference",
		"FieldRequiredness",
		"FieldValue",
		"FlagArgs",
		"Function",
		"FunctionList",
		"FunctionType",
		"Header",
		"HeaderList",
		"Include",
		"Oneway",
		"Program",
		"Senum",
		"SenumDef",
		"SenumDefList",
		"Service",
		"Struct",
		"StructHead",
		"Throws",
		"tok_extends",
		"tok_throws",
		"tok_xsd_all",
		"TypeAnnotation",
		"TypeAnnotationList",
		"TypeAnnotationValue",
		"Typedef",
		"TypeDefinition",
		"UnflagArgs",
		"Xception",
		"XsdAll",
		"XsdAttributes",
		"XsdNillable",
		"XsdOptional",
		"$default",
		"error",
		"tok_doctext",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {95, 2},
		2:   {51, 0},
		3:   {77, 0},
		4:   {92, 3},
		5:   {92, 0},
		6:   {91, 1},
		7:   {91, 4},
		8:   {91, 3},
		9:   {91, 2},
		10:  {93, 2},
		11:  {76, 3},
		12:  {76, 0},
		13:  {75, 1},
		14:  {75, 1},
		15:  {75, 1},
		16:  {110, 1},
		17:  {110, 1},
		18:  {110, 1},
		19:  {110, 1},
		20:  {110, 1},
		21:  {49, 1},
		22:  {49, 1},
		23:  {49, 0},
		24:  {109, 5},
		25:  {78, 6},
		26:  {80, 2},
		27:  {80, 0},
		28:  {79, 5},
		29:  {81, 3},
		30:  {81, 1},
		31:  {96, 6},
		32:  {98, 2},
		33:  {98, 0},
		34:  {97, 2},
		35:  {72, 7},
		36:  {62, 1},
		37:  {62, 1},
		38:  {62, 1},
		39:  {62, 1},
		40:  {62, 1},
		41:  {62, 1},
		42:  {60, 3},
		43:  {73, 3},
		44:  {73, 0},
		45:  {61, 3},
		46:  {74, 5},
		47:  {74, 0},
		48:  {101, 1},
		49:  {101, 1},
		50:  {100, 7},
		51:  {113, 1},
		52:  {113, 0},
		53:  {116, 1},
		54:  {116, 0},
		55:  {115, 1},
		56:  {115, 0},
		57:  {114, 4},
		58:  {114, 0},
		59:  {112, 6},
		60:  {99, 10},
		61:  {87, 0},
		62:  {111, 0},
		63:  {82, 2},
		64:  {82, 0},
		65:  {89, 2},
		66:  {89, 0},
		67:  {88, 12},
		68:  {94, 1},
		69:  {94, 0},
		70:  {102, 4},
		71:  {102, 0},
		72:  {65, 2},
		73:  {65, 0},
		74:  {63, 13},
		75:  {83, 2},
		76:  {83, 0},
		77:  {84, 1},
		78:  {84, 0},
		79:  {85, 1},
		80:  {85, 1},
		81:  {85, 0},
		82:  {86, 2},
		83:  {86, 0},
		84:  {90, 1},
		85:  {90, 1},
		86:  {53, 1},
		87:  {53, 1},
		88:  {53, 1},
		89:  {50, 2},
		90:  {57, 1},
		91:  {57, 1},
		92:  {57, 1},
		93:  {57, 1},
		94:  {57, 1},
		95:  {57, 1},
		96:  {57, 1},
		97:  {57, 1},
		98:  {57, 1},
		99:  {52, 2},
		100: {58, 1},
		101: {58, 1},
		102: {58, 1},
		103: {55, 7},
		104: {56, 5},
		105: {54, 5},
		106: {67, 2},
		107: {67, 0},
		108: {43, 3},
		109: {43, 0},
		110: {107, 2},
		111: {107, 0},
		112: {106, 4},
		113: {108, 2},
		114: {108, 0},
		115: {70, 2},
		116: {70, 0},
		117: {69, 1},
		118: {64, 1},
		119: {64, 0},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [209][]uint16{
		// 0
		{9: 115, 17: 115, 115, 115, 115, 22: 115, 115, 115, 115, 115, 44: 115, 115, 115, 92: 122, 95: 121},
		{18: 120},
		{9: 108, 17: 108, 108, 108, 108, 22: 108, 108, 108, 108, 108, 44: 117, 117, 117, 76: 123, 124},
		{9: 118, 17: 118, 119, 118, 118, 22: 118, 118, 118, 118, 118, 51: 150},
		{44: 128, 129, 127, 91: 125, 93: 126},
		// 5
		{9: 116, 17: 116, 116, 116, 116, 22: 116, 116, 116, 116, 116, 44: 116, 116, 116},
		{9: 114, 17: 114, 114, 114, 114, 22: 114, 114, 114, 114, 114, 44: 114, 114, 114},
		{132, 71: 133},
		{33: 131},
		{33: 130},
		// 10
		{9: 110, 17: 110, 110, 110, 110, 22: 110, 110, 110, 110, 110, 44: 110, 110, 110},
		{9: 111, 17: 111, 111, 111, 111, 22: 111, 111, 111, 111, 111, 44: 111, 111, 111},
		{135},
		{134},
		{9: 112, 17: 112, 112, 112, 112, 22: 112, 112, 112, 112, 112, 44: 112, 112, 112},
		// 15
		{9: 11, 16: 137, 11, 11, 11, 11, 22: 11, 11, 11, 11, 11, 43: 136, 11, 11, 11},
		{9: 113, 17: 113, 113, 113, 113, 22: 113, 113, 113, 113, 113, 44: 113, 113, 113},
		{9, 30: 9, 107: 138},
		{141, 30: 139, 106: 140},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 34: 12, 12, 38: 12, 12, 44: 12, 12, 12},
		// 20
		{10, 30: 10},
		{6, 14: 6, 27: 6, 30: 6, 6, 66: 143, 108: 142},
		{97, 14: 145, 27: 97, 30: 97, 146, 49: 147},
		{33: 144},
		{7, 14: 7, 27: 7, 30: 7, 7},
		// 25
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 15: 99, 17: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 32: 99, 99, 36: 99, 99, 99, 99, 41: 99},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 15: 98, 17: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 32: 98, 98, 36: 98, 98, 98, 98, 41: 98},
		{1, 27: 149, 30: 1, 64: 148},
		{8, 30: 8},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 15: 2, 17: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 28: 2, 2, 2, 38: 2, 2},
		// 30
		{9: 4, 17: 4, 19: 163, 161, 22: 162, 164, 160, 165, 167, 70: 168, 72: 152, 75: 151, 78: 156, 96: 157, 99: 154, 158, 166, 109: 155, 153, 112: 159},
		{9: 109, 17: 109, 109, 109, 109, 22: 109, 109, 109, 109, 109},
		{9: 107, 17: 107, 107, 107, 107, 22: 107, 107, 107, 107, 107},
		{9: 106, 17: 106, 106, 106, 106, 22: 106, 106, 106, 106, 106},
		{9: 105, 17: 105, 105, 105, 105, 22: 105, 105, 105, 105, 105},
		// 35
		{9: 104, 17: 104, 104, 104, 104, 22: 104, 104, 104, 104, 104},
		{9: 103, 17: 103, 103, 103, 103, 22: 103, 103, 103, 103, 103},
		{9: 102, 17: 102, 102, 102, 102, 22: 102, 102, 102, 102, 102},
		{9: 101, 17: 101, 101, 101, 101, 22: 101, 101, 101, 101, 101},
		{9: 100, 17: 100, 100, 100, 100, 22: 100, 100, 100, 100, 100},
		// 40
		{188, 193, 195, 200, 197, 198, 199, 196, 207, 10: 205, 206, 194, 192, 50: 189, 52: 190, 325, 204, 202, 203, 191, 201},
		{311},
		{303},
		{188, 193, 195, 200, 197, 198, 199, 196, 207, 10: 205, 206, 194, 192, 50: 189, 52: 190, 297, 204, 202, 203, 191, 201},
		{72},
		// 45
		{71},
		{290},
		{285},
		{9: 171, 17: 169, 69: 170},
		{172},
		// 50
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 17: 5, 38: 5, 5},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 17: 3, 38: 3, 3},
		{32: 56, 82: 173, 103: 174},
		{32: 176},
		{175},
		// 55
		{32: 57},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 15: 59, 38: 59, 59, 87: 177},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 15: 54, 38: 54, 54, 89: 178},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 15: 58, 38: 118, 118, 51: 181, 88: 180, 111: 179},
		{15: 283},
		// 60
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15: 55, 38: 55, 55},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 38: 4, 4, 70: 182},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 171, 51, 51, 51, 51, 38: 51, 184, 69: 170, 94: 183},
		{188, 193, 195, 200, 197, 198, 199, 196, 207, 10: 205, 206, 194, 192, 38: 187, 50: 189, 52: 190, 186, 204, 202, 203, 191, 201, 90: 185},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 10: 52, 52, 52, 52, 38: 52},
		// 65
		{226},
		{36},
		{35},
		{34, 14: 34, 34: 34, 34},
		{33, 14: 33, 34: 33, 33},
		// 70
		{32, 14: 32, 34: 32, 32},
		{11, 14: 11, 16: 137, 34: 11, 11, 43: 225},
		{30, 14: 30, 16: 30, 34: 30, 30},
		{29, 14: 29, 16: 29, 34: 29, 29},
		{28, 14: 28, 16: 28, 34: 28, 28},
		// 75
		{27, 14: 27, 16: 27, 34: 27, 27},
		{26, 14: 26, 16: 26, 34: 26, 26},
		{25, 14: 25, 16: 25, 34: 25, 25},
		{24, 14: 24, 16: 24, 34: 24, 24},
		{23, 14: 23, 16: 23, 34: 23, 23},
		// 80
		{22, 14: 22, 16: 22, 34: 22, 22},
		{11, 14: 11, 16: 137, 34: 11, 11, 43: 224},
		{20, 14: 20, 16: 20, 34: 20, 20},
		{19, 14: 19, 16: 19, 34: 19, 19},
		{18, 14: 18, 16: 18, 34: 18, 18},
		// 85
		{59: 13, 67: 218, 212},
		{59: 13, 67: 214, 212},
		{59: 208},
		{188, 193, 195, 200, 197, 198, 199, 196, 207, 10: 205, 206, 194, 192, 50: 189, 52: 190, 209, 204, 202, 203, 191, 201},
		{34: 210},
		// 90
		{13, 14: 13, 16: 13, 34: 13, 13, 67: 211, 212},
		{15, 14: 15, 16: 15, 34: 15, 15},
		{33: 213},
		{14, 14: 14, 16: 14, 34: 14, 14, 59: 14},
		{59: 215},
		// 95
		{188, 193, 195, 200, 197, 198, 199, 196, 207, 10: 205, 206, 194, 192, 50: 189, 52: 190, 216, 204, 202, 203, 191, 201},
		{34: 217},
		{16, 14: 16, 16: 16, 34: 16, 16},
		{59: 219},
		{188, 193, 195, 200, 197, 198, 199, 196, 207, 10: 205, 206, 194, 192, 50: 189, 52: 190, 220, 204, 202, 203, 191, 201},
		// 100
		{14: 221},
		{188, 193, 195, 200, 197, 198, 199, 196, 207, 10: 205, 206, 194, 192, 50: 189, 52: 190, 222, 204, 202, 203, 191, 201},
		{34: 223},
		{17, 14: 17, 16: 17, 34: 17, 17},
		{21, 14: 21, 34: 21, 21},
		// 105
		{31, 14: 31, 34: 31, 31},
		{16: 227},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 10: 47, 47, 47, 47, 21: 47, 28: 47, 47, 47, 65: 228},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 10: 118, 118, 118, 118, 21: 118, 28: 118, 118, 229, 51: 231, 63: 230},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 27: 49, 31: 49, 38: 49, 49, 102: 275, 104: 276},
		// 110
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 10: 48, 48, 48, 48, 15: 48, 21: 48, 28: 48, 48, 48},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 10: 44, 44, 44, 44, 21: 233, 28: 44, 44, 83: 232},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 10: 39, 39, 39, 39, 28: 237, 236, 85: 235},
		{48: 234},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 10: 45, 45, 45, 45, 28: 45, 45},
		// 115
		{188, 193, 195, 200, 197, 198, 199, 196, 207, 10: 205, 206, 194, 192, 50: 189, 52: 190, 238, 204, 202, 203, 191, 201},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 10: 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 10: 40, 40, 40, 40},
		{42, 35: 240, 84: 239},
		{241},
		// 120
		{43},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 10: 37, 37, 37, 37, 37, 37, 37, 21: 37, 27: 37, 37, 37, 37, 37, 40: 37, 42: 37, 47: 37, 66: 243, 86: 242},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 10: 66, 66, 66, 66, 66, 66, 66, 21: 66, 27: 66, 66, 66, 66, 66, 40: 66, 42: 66, 47: 263, 116: 264},
		{247, 21: 244, 32: 251, 246, 36: 250, 245, 60: 248, 249, 252},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 36: 84, 84, 40: 84, 84, 84, 47: 84, 84},
		// 125
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 36: 83, 83, 40: 83, 83, 83, 47: 83, 83},
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 36: 82, 82, 40: 82, 82, 82, 47: 82, 82},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 36: 81, 81, 40: 81, 81, 81, 47: 81, 81},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 36: 80, 80, 40: 80, 80, 80, 47: 80, 80},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 36: 79, 79, 40: 79, 79, 79, 47: 79, 79},
		// 130
		{76, 21: 76, 32: 76, 76, 36: 76, 76, 41: 76, 73: 259},
		{73, 15: 73, 21: 73, 32: 73, 73, 36: 73, 73, 74: 253},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 10: 38, 38, 38, 38, 38, 38, 38, 21: 38, 27: 38, 38, 38, 38, 38, 40: 38, 42: 38, 47: 38},
		{247, 15: 254, 21: 244, 32: 251, 246, 36: 250, 245, 60: 248, 249, 255},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 36: 75, 75, 40: 75, 75, 75, 47: 75, 75},
		// 135
		{48: 256},
		{247, 21: 244, 32: 251, 246, 36: 250, 245, 60: 248, 249, 257},
		{97, 14: 145, 97, 21: 97, 31: 146, 97, 97, 36: 97, 97, 49: 258},
		{74, 15: 74, 21: 74, 32: 74, 74, 36: 74, 74},
		{247, 21: 244, 32: 251, 246, 36: 250, 245, 41: 260, 60: 248, 249, 261},
		// 140
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 36: 78, 78, 40: 78, 78, 78, 47: 78, 78},
		{97, 14: 145, 21: 97, 31: 146, 97, 97, 36: 97, 97, 41: 97, 49: 262},
		{77, 21: 77, 32: 77, 77, 36: 77, 77, 41: 77},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 10: 67, 67, 67, 67, 67, 67, 67, 21: 67, 27: 67, 67, 67, 67, 67, 40: 67, 42: 67},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 10: 64, 64, 64, 64, 64, 64, 64, 21: 64, 27: 64, 64, 64, 64, 64, 40: 64, 42: 265, 115: 266},
		// 145
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 10: 65, 65, 65, 65, 65, 65, 65, 21: 65, 27: 65, 65, 65, 65, 65, 40: 65},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 10: 62, 62, 62, 62, 62, 62, 62, 21: 62, 27: 62, 62, 62, 62, 62, 40: 267, 114: 268},
		{32: 272},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 10: 11, 11, 11, 11, 11, 11, 137, 21: 11, 27: 11, 11, 11, 11, 11, 43: 269},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 10: 97, 97, 97, 97, 145, 97, 21: 97, 27: 97, 97, 97, 97, 146, 49: 270},
		// 150
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 10: 1, 1, 1, 1, 15: 1, 21: 1, 27: 149, 1, 1, 1, 64: 271},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 10: 46, 46, 46, 46, 15: 46, 21: 46, 28: 46, 46, 46},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 10: 47, 47, 47, 47, 15: 47, 21: 47, 28: 47, 47, 65: 273},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 10: 118, 118, 118, 118, 15: 274, 21: 118, 28: 118, 118, 51: 231, 63: 230},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 10: 63, 63, 63, 63, 63, 63, 63, 21: 63, 27: 63, 63, 63, 63, 63},
		// 155
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 137, 27: 11, 31: 11, 38: 11, 11, 43: 280},
		{16: 277},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 10: 47, 47, 47, 47, 21: 47, 28: 47, 47, 47, 65: 278},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 10: 118, 118, 118, 118, 21: 118, 28: 118, 118, 279, 51: 231, 63: 230},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 27: 50, 31: 50, 38: 50, 50},
		// 160
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 145, 97, 27: 97, 31: 146, 38: 97, 97, 49: 281},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15: 1, 27: 149, 38: 1, 1, 64: 282},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 15: 53, 38: 53, 53},
		{9: 11, 16: 137, 11, 11, 11, 11, 22: 11, 11, 11, 11, 11, 43: 284},
		{9: 60, 17: 60, 60, 60, 60, 22: 60, 60, 60, 60, 60},
		// 165
		{32: 286},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 10: 47, 47, 47, 47, 15: 47, 21: 47, 28: 47, 47, 65: 287},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 10: 118, 118, 118, 118, 15: 288, 21: 118, 28: 118, 118, 51: 231, 63: 230},
		{9: 11, 16: 137, 11, 11, 11, 11, 22: 11, 11, 11, 11, 11, 43: 289},
		{9: 61, 17: 61, 61, 61, 61, 22: 61, 61, 61, 61, 61},
		// 170
		{32: 68, 105: 292, 113: 291},
		{32: 293},
		{32: 69},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 10: 47, 47, 47, 47, 15: 47, 21: 47, 28: 47, 47, 65: 294},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 10: 118, 118, 118, 118, 15: 295, 21: 118, 28: 118, 118, 51: 231, 63: 230},
		// 175
		{9: 11, 16: 137, 11, 11, 11, 11, 22: 11, 11, 11, 11, 11, 43: 296},
		{9: 70, 17: 70, 70, 70, 70, 22: 70, 70, 70, 70, 70},
		{298},
		{66: 299},
		{247, 21: 244, 32: 251, 246, 36: 250, 245, 60: 248, 249, 300},
		// 180
		{9: 97, 14: 145, 17: 97, 97, 97, 97, 22: 97, 97, 97, 97, 97, 97, 31: 146, 49: 301},
		{9: 1, 17: 1, 1, 1, 1, 22: 1, 1, 1, 1, 1, 149, 64: 302},
		{9: 85, 17: 85, 85, 85, 85, 22: 85, 85, 85, 85, 85},
		{32: 304},
		{15: 87, 33: 87, 98: 305},
		// 185
		{15: 306, 33: 308, 97: 307},
		{9: 11, 16: 137, 11, 11, 11, 11, 22: 11, 11, 11, 11, 11, 43: 310},
		{15: 88, 33: 88},
		{14: 145, 97, 31: 146, 33: 97, 49: 309},
		{15: 86, 33: 86},
		// 190
		{9: 89, 17: 89, 89, 89, 89, 22: 89, 89, 89, 89, 89},
		{32: 312},
		{93, 15: 93, 80: 313},
		{118, 15: 314, 51: 316, 79: 315},
		{9: 11, 16: 137, 11, 11, 11, 11, 22: 11, 11, 11, 11, 11, 43: 324},
		// 195
		{94, 15: 94},
		{318, 81: 317},
		{11, 14: 11, 11, 137, 27: 11, 31: 11, 43: 321},
		{90, 14: 90, 90, 90, 27: 90, 31: 90, 66: 319},
		{21: 320},
		// 200
		{91, 14: 91, 91, 91, 27: 91, 31: 91},
		{97, 14: 145, 97, 27: 97, 31: 146, 49: 322},
		{1, 15: 1, 27: 149, 64: 323},
		{92, 15: 92},
		{9: 95, 17: 95, 95, 95, 95, 22: 95, 95, 95, 95, 95},
		// 205
		{326},
		{9: 11, 14: 11, 16: 137, 11, 11, 11, 11, 22: 11, 11, 11, 11, 11, 31: 11, 43: 327},
		{9: 97, 14: 145, 17: 97, 97, 97, 97, 22: 97, 97, 97, 97, 97, 31: 146, 49: 328},
		{9: 96, 17: 96, 96, 96, 96, 22: 96, 96, 96, 96, 96},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 118

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			//log.Println("Program -> HeaderList DefinitionList")
			Program()
		}
	case 2:
		{
			//log.Println("CaptureDocText")
			yyVAL.dtext = CaptureDocText()
		}
	case 3:
		{
			DestoryDocText()
		}
	case 4:
		{
			// log.Println("[yacc]HeaderList -> HeaderList Header")
		}
	case 5:
		{
			// log.Println("[yacc]HeaderList -> ")
		}
	case 6:
		{
			//log.Println("[yacc]Header -> Include")
		}
	case 7:
		{
			//log.Println("[yacc]Header -> tok_namespace tok_identifier tok_identifier")
			crtFile.SetNamespaceWithLang(yyS[yypt-2].id, yyS[yypt-1].id)
			if yyS[yypt-0].tannos != nil {
				crtFile.SetNamespaceAnnotations(yyS[yypt-2].id, yyS[yypt-0].tannos)
			}
		}
	case 8:
		{
			//log.Println("[yacc]Header -> tok_namespace * tok_identifier")
			crtFile.SetNamespaceWithLang("*", yyS[yypt-0].id)
		}
	case 9:
		{
			//log.Println("[yacc]Header -> tok_cpp_include tok_literal");
			crtFile.AddCppInclude(yyS[yypt-0].id)
		}
	case 10:
		{
			IncludeFile(yyS[yypt-0].id)
		}
	case 11:
		{
			//log.Println("[yacc]DefintionList -> DefinitionList CaptureDocText Definition")
		}
	case 12:
		{
			//log.Println("[yacc]DefinitionList -> ");
		}
	case 13:
		{
			//log.Println("[yacc]Definition -> Const")
			crtMicroMod.AddConst(yyS[yypt-0].tconst)
			yyVAL.tdoc = idl.NewDefine(yyS[yypt-0].tconst.GetName())
		}
	case 14:
		{
			//log.Println("[yacc]Definition -> TypeDefinition", $1.GetName())
			crtMicroMod.AddType(yyS[yypt-0].idldoci)
			yyVAL.tdoc = idl.NewDefine(yyS[yypt-0].idldoci.GetName())
		}
	case 15:
		{
			//log.Println("[yacc]Definition -> Service")
			crtMicroMod.AddService(yyS[yypt-0].tservice)
			yyVAL.tdoc = idl.NewDefine(yyS[yypt-0].tservice.GetName())
		}
	case 16:
		{
			//log.Println("[yacc]TypeDefinition -> Typedef")
			crtMicroMod.AddTypedef(yyS[yypt-0].ttypedef)
			yyVAL.idldoci = yyS[yypt-0].ttypedef
		}
	case 17:
		{
			//log.Println("[yacc]TypeDefinition -> Enum")
			crtMicroMod.AddEnum(yyS[yypt-0].tenum)
			yyVAL.idldoci = yyS[yypt-0].tenum
		}
	case 18:
		{
			NotSupported("Senum")
		}
	case 19:
		{
			//log.Println("[yacc]TypeDefinition -> Struct");
			crtMicroMod.AddStruct(yyS[yypt-0].tstruct)
			yyVAL.idldoci = yyS[yypt-0].tstruct
		}
	case 20:
		{
			//log.Println("[yacc]TypeDefinition -> Xception");
			crtMicroMod.AddXception(yyS[yypt-0].tstruct)
			yyVAL.idldoci = yyS[yypt-0].tstruct
		}
	case 24:
		{
			td := crtFile.NewTypedef(yyS[yypt-3].idltype, yyS[yypt-2].id)
			yyVAL.ttypedef = td
			if yyS[yypt-1].tannos != nil {
				yyVAL.ttypedef.SetAnnotations(yyS[yypt-1].tannos)
			}
		}
	case 25:
		{
			//log.Println("[yacc]Enum -> tok_enum tok_identifier { EnumDefList }")
			yyVAL.tenum = yyS[yypt-2].tenum
			yyVAL.tenum.SetName(yyS[yypt-4].id)
			if yyS[yypt-0].tannos != nil {
				yyVAL.tenum.SetAnnotations(yyS[yypt-0].tannos)
			}
		}
	case 26:
		{
			//log.Println("[yacc]EnumDefList -> EnumDefList EnumDef")
			yyVAL.tenum = yyS[yypt-1].tenum
			yyVAL.tenum.Append(yyS[yypt-0].tenumv)
		}
	case 27:
		{
			//log.Println("[yacc]EnumDefList -> ")
			yyVAL.tenum = crtFile.NewEnum()
			y_enum_val = -1
		}
	case 28:
		{
			yyVAL.tenumv = yyS[yypt-3].tenumv
			yyVAL.tenumv.SetComment(yyS[yypt-0].dtext)
			if yyS[yypt-2].tannos != nil {
				yyVAL.tenumv.SetAnnotations(yyS[yypt-2].tannos)
			}
		}
	case 29:
		{
			//log.Println("[yacc]EnumValue -> tok_identifier = tok_int_constant")
			y_enum_val = yyS[yypt-0].iconst
			yyVAL.tenumv = crtFile.NewEnumValue(yyS[yypt-2].id, y_enum_val)
		}
	case 30:
		{
			y_enum_val++
			yyVAL.tenumv = crtFile.NewEnumValue(yyS[yypt-0].id, y_enum_val)
		}
	case 31:
		{
			NotSupported("Senum", yyS[yypt-4].id, yyS[yypt-2].senum, yyS[yypt-0].tannos)
		}
	case 32:
		{
			NotSupported("Senum", yyS[yypt-1].senum, yyS[yypt-0].id)
		}
	case 33:
		{
			NotSupported("Senum")
		}
	case 34:
		{
			NotSupported("Senum", yyS[yypt-1].id)
		}
	case 35:
		{
			//log.Println("[yacc]Const -> tok_const FieldType tok_identifier = ConstValue")
			yyVAL.tconst = crtFile.NewConst(yyS[yypt-5].idltype, yyS[yypt-4].id, yyS[yypt-2].tconstv, yyS[yypt-0].dtext)
			crtMicroMod.AddConst(yyVAL.tconst)
		}
	case 36:
		{
			yyVAL.tconstv = yyS[yypt-0].iconst
		}
	case 37:
		{
			yyVAL.tconstv = yyS[yypt-0].dconst
		}
	case 38:
		{
			yyVAL.tconstv = yyS[yypt-0].id
		}
	case 39:
		{
			yyVAL.tconstv = yyS[yypt-0].id
		}
	case 40:
		{
			yyVAL.tconstv = yyS[yypt-0].idlconstlist
		}
	case 41:
		{
			yyVAL.tconstv = yyS[yypt-0].idlconstmap
		}
	case 42:
		{
			log.Println("[yacc]ConstList => [ ConstListContents ]")
			yyVAL.idlconstlist = yyS[yypt-1].idlconstlist
		}
	case 43:
		{
			log.Println("[yacc]ConstListContents => ConstListContents ConstValue CommaOrSemicolonOptional")
			yyVAL.idlconstlist = yyS[yypt-2].idlconstlist
			yyVAL.idlconstlist = append(yyVAL.idlconstlist, yyS[yypt-1].tconstv)
		}
	case 44:
		{
			yyVAL.idlconstlist = nil
		}
	case 45:
		{
			yyVAL.idlconstmap = yyS[yypt-1].idlconstmap
		}
	case 46:
		{
			//log.Println("[yacc]ConstMapContents => ConstMapContents ConstValue CommaOrSemicolonOptional")
			yyVAL.idlconstmap = yyS[yypt-4].idlconstmap
			yyVAL.idlconstmap[yyS[yypt-3].tconstv] = yyS[yypt-1].tconstv
		}
	case 47:
		{
			yyVAL.idlconstmap = make(map[interface{}]interface{})
		}
	case 48:
		{
			yyVAL.iconst = struct_is_struct
		}
	case 49:
		{
			yyVAL.iconst = struct_is_union
		}
	case 50:
		{
			yyS[yypt-2].tstruct.SetXsdAll(yyS[yypt-4].tbool)
			yyS[yypt-2].tstruct.SetUnion(yyS[yypt-6].iconst == struct_is_union)
			yyVAL.tstruct = yyS[yypt-2].tstruct
			yyVAL.tstruct.SetName(yyS[yypt-5].id)
			if yyS[yypt-0].tannos != nil {
				yyVAL.tstruct.SetAnnotations(yyS[yypt-0].tannos)
			}
		}
	case 51:
		{
			yyVAL.tbool = true
		}
	case 52:
		{
			yyVAL.tbool = false
		}
	case 53:
		{
			yyVAL.tbool = true
		}
	case 54:
		{
			yyVAL.tbool = false
		}
	case 55:
		{
			yyVAL.tbool = true
		}
	case 56:
		{
			yyVAL.tbool = false
		}
	case 57:
		{
			yyVAL.tstruct = yyS[yypt-1].tstruct
		}
	case 58:
		{
			yyVAL.tstruct = nil
		}
	case 59:
		{
			yyS[yypt-2].tstruct.SetName(yyS[yypt-4].id)
			yyS[yypt-2].tstruct.SetXception(true)
			yyVAL.tstruct = yyS[yypt-2].tstruct
			if yyS[yypt-0].tannos != nil {
				yyVAL.tstruct.SetAnnotations(yyS[yypt-0].tannos)
			}
		}
	case 60:
		{
			//log.Println("what's the hell")
			//log.Println("[yacc]Service -> tok_service tok_identifier { FunctionList }")
			yyVAL.tservice = yyS[yypt-3].tservice
			yyVAL.tservice.SetName(yyS[yypt-7].id)
			yyVAL.tservice.SetExtends(yyS[yypt-6].tservice)
			if yyS[yypt-0].tannos != nil {
				yyVAL.tservice.SetAnnotations(yyS[yypt-0].tannos)
			}
			if yyS[yypt-9].tlobattrs != nil {
				yyVAL.tservice.SetAttrs(yyS[yypt-9].tlobattrs)
				yyS[yypt-9].tlobattrs.SetName("service_" + yyS[yypt-7].id)
			}
		}
	case 61:
		{
			G_arglist = 1
		}
	case 62:
		{
			G_arglist = 0
		}
	case 63:
		{
			log.Println("[yacc]Extends -> tok_extends tok_identifier")
			yyVAL.tservice = crtMicroMod.SearchService(yyS[yypt-0].id, crtFile)
		}
	case 64:
		{
			yyVAL.tservice = nil
		}
	case 65:
		{
			//log.Println("[yacc]FunctionList -> FunctionList Function", $1, $2)
			yyVAL.tservice = yyS[yypt-1].tservice
			yyVAL.tservice.AddFunction(yyS[yypt-0].tfunction)
		}
	case 66:
		{
			//log.Println("[yacc]FunctionList -> ");
			yyVAL.tservice = crtFile.NewService()
		}
	case 67:
		{
			yyS[yypt-5].tstruct.SetReqStructName(yyS[yypt-7].id)
			yyVAL.tfunction = crtFile.NewFunction(yyS[yypt-8].idltype, yyS[yypt-7].id, yyS[yypt-5].tstruct, yyS[yypt-3].tstruct, yyS[yypt-9].tbool)
			if yyS[yypt-2].tannos != nil {
				yyVAL.tfunction.SetAnnotations(yyS[yypt-2].tannos)
			}

			yyVAL.tfunction.SetComment(yyS[yypt-0].dtext)
			yyVAL.tfunction.SetAttrs(yyS[yypt-10].tlobattrs)
			yyS[yypt-10].tlobattrs.SetName("func_" + yyS[yypt-7].id)
		}
	case 68:
		{
			yyVAL.tbool = true
			//log.Println("oneway:", $$)
		}
	case 69:
		{
			yyVAL.tbool = false
			//log.Println("oneway:", $$)
		}
	case 70:
		{
			//log.Println("[yacc]Throws -> tok_throws ( FieldList )");
			yyVAL.tstruct = yyS[yypt-1].tstruct
		}
	case 71:
		{
			//log.Println("Throws ->")
			yyVAL.tstruct = crtFile.NewEmptyStruct()
		}
	case 72:
		{
			//log.Println("[yacc]FieldList -> FieldList , Field");
			yyVAL.tstruct = yyS[yypt-1].tstruct
			err := yyVAL.tstruct.Append(yyS[yypt-0].tfield)
			if err != nil {
				panic(err.Error())
			}
		}
	case 73:
		{
			//log.Println("[yacc]FieldList -> ");
			y_field_val = -1
			yyVAL.tstruct = crtFile.NewStruct()
		}
	case 74:
		{
			yyVAL.tfield = crtFile.NewField(yyS[yypt-11].idlfieldid, yyS[yypt-9].idltype, yyS[yypt-7].id)
			yyVAL.tfield.SetReference(yyS[yypt-8].tbool)
			yyVAL.tfield.SetReq(yyS[yypt-10].ereq)
			if yyS[yypt-6].tconstv != nil {
				yyVAL.tfield.SetValue(yyS[yypt-6].tconstv)
			}
			yyVAL.tfield.SetXsdOptional(yyS[yypt-5].tbool)
			yyVAL.tfield.SetXsdNillable(yyS[yypt-4].tbool)
			if yyS[yypt-3].tstruct != nil {
				yyVAL.tfield.SetXsdAttrs(yyS[yypt-3].tstruct)
			}
			if yyS[yypt-2].tannos != nil {
				yyVAL.tfield.SetAnnotations(yyS[yypt-2].tannos)
			}
			yyVAL.tfield.SetComment(yyS[yypt-0].dtext)
		}
	case 75:
		{
			yyVAL.idlfieldid = yyS[yypt-1].iconst
		}
	case 76:
		{
			yyVAL.idlfieldid = 0
		}
	case 77:
		{
			yyVAL.tbool = true
		}
	case 78:
		{
			yyVAL.tbool = false
		}
	case 79:
		{
			yyVAL.ereq = idl.T_REQUIRED
		}
	case 80:
		{
			if G_arglist > 0 {
				yyVAL.ereq = idl.T_OPT_IN_REQ_OUT
			} else {
				yyVAL.ereq = idl.T_OPTIONAL
			}
		}
	case 81:
		{
			yyVAL.ereq = idl.T_OPT_IN_REQ_OUT
		}
	case 82:
		{
			if G_parse_mode == PROGRAM {
				yyVAL.tconstv = yyS[yypt-0].tconstv
			} else {
				yyVAL.tconstv = nil
			}
		}
	case 83:
		{
			yyVAL.tconstv = nil
		}
	case 84:
		{
			//log.Println("FunctionType -> FieldType", $1)
			yyVAL.idltype = yyS[yypt-0].idltype
		}
	case 85:
		{
			//log.Println("FunctionType -> tok_void")
			yyVAL.idltype = nil
		}
	case 86:
		{
			//log.Println("[yacc]FieldType -> tok_identifier", $1);
			yyVAL.idltype = crtMicroMod.SearchType(yyS[yypt-0].id, crtFile)
			if yyVAL.idltype == nil {
				yyVAL.idltype = crtMicroMod.AddPlaceholderTypedef(yyS[yypt-0].id, crtFile)
			}
		}
	case 87:
		{
			//log.Println("[yacc]FieldType -> BaseType");
			yyVAL.idltype = yyS[yypt-0].tbase
		}
	case 88:
		{
			//log.Println("[yacc]FieldType -> ContainerType");
			yyVAL.idltype = yyS[yypt-0].tcontainer
		}
	case 89:
		{
			if yyS[yypt-0].tannos != nil {
				yyVAL.tbase = yyS[yypt-1].tbase
				yyVAL.tbase.SetAnnotations(yyS[yypt-0].tannos)
			} else {
				yyVAL.tbase = yyS[yypt-1].tbase
			}
		}
	case 90:
		{
			yyVAL.tbase = idl.BaseTypeString
		}
	case 91:
		{
			yyVAL.tbase = idl.BaseTypeBinary
		}
	case 92:
		{
			yyVAL.tbase = idl.BaseTypeSlist
		}
	case 93:
		{
			yyVAL.tbase = idl.BaseTypeBool
		}
	case 94:
		{
			yyVAL.tbase = idl.BaseTypeI8
		}
	case 95:
		{
			yyVAL.tbase = idl.BaseTypeI16
		}
	case 96:
		{
			yyVAL.tbase = idl.BaseTypeI32
		}
	case 97:
		{
			yyVAL.tbase = idl.BaseTypeI64
		}
	case 98:
		{
			yyVAL.tbase = idl.BaseTypeDouble
		}
	case 99:
		{
			yyVAL.tcontainer = yyS[yypt-1].tcontainer
			if yyS[yypt-0].tannos != nil {
				yyVAL.tcontainer.SetAnnotations(yyS[yypt-0].tannos)
			}
		}
	case 100:
		{
			//log.Println("[yacc]SimpleContainerType -> MapType")
			yyVAL.tcontainer = yyS[yypt-0].tmap
		}
	case 101:
		{
			//log.Println("[yacc]SimpleContainerType -> SetType")
			yyVAL.tcontainer = yyS[yypt-0].tset
		}
	case 102:
		{
			//log.Println("[yacc]SimpleContainerType -> ListType")
			yyVAL.tcontainer = yyS[yypt-0].tlist
		}
	case 103:
		{
			//log.Println("[yacc]MapType -> tok_map <FieldType, FieldType>")
			yyVAL.tmap = crtFile.NewMap(yyS[yypt-3].idltype, yyS[yypt-1].idltype)
			if yyS[yypt-5].id != "" {
				yyVAL.tmap.SetCppName(yyS[yypt-5].id)
			}
		}
	case 104:
		{
			//log.Println("[yacc]SetType -> tok_set<FieldType>")
			yyVAL.tset = crtFile.NewSet(yyS[yypt-1].idltype)
			if yyS[yypt-3].id != "" {
				yyVAL.tset.SetCppName(yyS[yypt-3].id)
			}
		}
	case 105:
		{
			yyVAL.tlist = crtFile.NewList(yyS[yypt-2].idltype)
			if yyS[yypt-0].id != "" {
				yyVAL.tlist.SetCppName(yyS[yypt-0].id)
			}
		}
	case 106:
		{
			yyVAL.id = yyS[yypt-0].id
		}
	case 107:
		{
			yyVAL.id = ""
		}
	case 108:
		{
			//log.Println("TypeAnno '(' TypeAnnotationList ')'")
			yyVAL.tannos = yyS[yypt-1].tannos
		}
	case 109:
		{
			//log.Println("TypeAnno")
			yyVAL.tannos = nil
		}
	case 110:
		{
			yyVAL.tannos = yyS[yypt-1].tannos
			yyVAL.tannos.Add(yyS[yypt-0].tanno)
		}
	case 111:
		{
			//log.Println("TypeAnnotationList")
			yyVAL.tannos = crtFile.NewAnnotations()
		}
	case 112:
		{
			yyVAL.tanno = idl.NewAnnotation(yyS[yypt-3].id, yyS[yypt-2].id, yyS[yypt-0].dtext)
		}
	case 113:
		{
			yyVAL.id = yyS[yypt-0].id
		}
	case 114:
		{
			yyVAL.id = "1"
		}
	case 115:
		{
			yyVAL.tlobattrs = yyS[yypt-1].tlobattrs
			yyVAL.tlobattrs.Append(yyS[yypt-0].tlobattr)
		}
	case 116:
		{
			yyVAL.tlobattrs = crtFile.CreateAttrList()
		}
	case 117:
		{
			yyVAL.tlobattr = crtFile.CreateAttr(yyS[yypt-0].dtext[3:])
		}
	case 118:
		{
			yyVAL.dtext = yyS[yypt-0].dtext[3:]
			//log.Println($1)
		}
	case 119:
		{
			yyVAL.dtext = ""
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
